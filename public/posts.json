[
  {
    "id": 4,
    "date": "2024-08-10",
    "tags": ["ابزارها", "Vite", "توسعه وب"],
    "title": "Vite: نسل جدید ابزارهای ساخت وب",
    "content": [
      { "type": "paragraph", "text": "اگر از سرعت پایین build و reload در پروژه‌های بزرگ وب خسته شده‌اید، Vite پاسخی برای شماست. Vite یک ابزار ساخت مدرن است که تجربه توسعه سریع‌تری را با بهره‌گیری از ماژول‌های نیتیو جاوااسکریپت (ESM) در مرورگر فراهم می‌کند." },
      { "type": "heading", "text": "چرا Vite اینقدر سریع است؟" },
      { "type": "paragraph", "text": "برخلاف ابزارهای سنتی مبتنی بر باندلر که کل برنامه را قبل از شروع سرور توسعه، بازسازی می‌کنند، Vite کدها را بر اساس تقاضا و از طریق ESM ارائه می‌دهد. این یعنی سرور توسعه تقریباً بلافاصله راه‌اندازی می‌شود و Hot Module Replacement (HMR) فوق‌العاده سریع است." },
      { "type": "code", "text": "# Start a new Vite project\n# It will prompt you to pick a framework\nnpm create vite@latest my-vue-app -- --template vue" },
      { "type": "quote", "text": "Vite تجربه توسعه فرانت‌اند را از نو تعریف می‌کند؛ سریع، ساده و قدرتمند.", "author": "یک توسعه‌دهنده خوشحال" },
      { "type": "paragraph", "text": "اکوسیستم Vite با پشتیبانی از فریمورک‌های محبوب مانند Vue، React، و Svelte و با داشتن یک سیستم پلاگین غنی، به سرعت در حال رشد است و به یک انتخاب اول برای پروژه‌های جدید تبدیل شده است." }
    ]
  },
  {
    "id": 3,
    "date": "2024-08-05",
    "tags": ["طراحی", "مینیمالیسم", "فلسفه طراحی"],
    "title": "مینیمالیسم در طراحی: کمتر، اما بهتر",
    "content": [
      { "type": "paragraph", "text": "مینیمالیسم در طراحی رابط کاربری فقط به معنای حذف عناصر نیست، بلکه به معنای رسیدن به شفافیت و هدفمندی است. این فلسفه بر این اصل استوار است که با حذف موارد غیرضروری، می‌توانیم بر محتوا و عملکرد اصلی تمرکز کنیم و تجربه کاربری بهتری خلق کنیم." },
      { "type": "image", "src": "https://images.unsplash.com/photo-1509343256512-d77a5cb3791b?q=80&w=2070", "alt": "یک میز کار مینیمال با یک لپ‌تاپ و یک گلدان کوچک." },
      { "type": "heading", "text": "اصول کلیدی مینیمالیسم" },
      { "type": "ul", "items": [
        "استفاده هوشمندانه از فضای منفی برای ایجاد آرامش بصری و هدایت چشم کاربر.",
        "کنتراست بالا برای خوانایی و تاکید بر عناصر مهم.",
        "تایپوگرافی قدرتمند و معنادار به عنوان یک عنصر طراحی کلیدی.",
        "محدود کردن پالت رنگی برای ایجاد هماهنگی و جلوگیری از حواس‌پرتی."
      ]},
      { "type": "quote", "text": "خوب طراحی کردن یعنی تا حد امکان کم طراحی کردن.", "author": "دیتر رامس" },
      { "type": "paragraph", "text": "در نهایت، یک طراحی مینیمال موفق، رابطی را ارائه می‌دهد که نه تنها زیبا به نظر می‌رسد، بلکه به طور شهودی عمل می‌کند و کاربر را قادر می‌سازد تا وظایf خود را با کمترین بار شناختی انجام دهد." }
    ]
  },
  {
    "id": 2,
    "date": "2024-07-22",
    "tags": ["متن‌باز", "برنامه‌نویسی", "تجربه شخصی"],
    "title": "چگونه اولین پروژه متن‌باز من به شکست انجامید (و چه چیزهایی یاد گرفتم)",
    "content": [
      { "type": "paragraph", "text": "همیشه رویای ساختن یک ابزار متن‌باز محبوب را داشتم. با هیجان زیاد، اولین پروژه بزرگم را شروع کردم: یک کتابخانه جاوااسکریپت برای ساخت انیمیشن‌های پیچیده. اما پس از چند ماه، پروژه به بن‌بست رسید و تقریباً هیچ‌کس از آن استفاده نکرد." },
      { "type": "heading", "text": "ایده بزرگ، اجرای ضعیف" },
      { "type": "paragraph", "text": "مشکل اصلی من این بود که بیش از حد روی ویژگی‌های فنی تمرکز کرده بودم و به نیازهای واقعی کاربران و جامعه توجهی نداشتم. مستندات ضعیف بود، هیچ راهنمای مشارکت‌کننده‌ای وجود نداشت و من در پاسخ به ایشوها کند عمل می‌کردم." },
      { "type": "ol", "items": [
          "درس اول: مستندات مهم‌تر از کد است. اگر کسی نداند چگونه از ابزار شما استفاده کند، بهترین کد دنیا هم بی‌فایده است.",
          "درس دوم: جامعه را از روز اول بسازید. با کاربران تعامل کنید و از آن‌ها بازخورد بگیرید.",
          "درس سوم: کوچک شروع کنید. یک مشکل واقعی را به خوبی حل کنید، سپس پروژه را گسترش دهید."
      ]},
      { "type": "quote", "text": "شکست فرصتی است برای شروع دوباره، این بار هوشمندانه‌تر.", "author": "هنری فورد" },
      { "type": "paragraph", "text": "اگرچه آن پروژه شکست خورد، اما درس‌هایی که از آن گرفتم، پایه‌ای برای موفقیت‌های بعدی من شد. نترسید که شکست بخورید، از آن یاد بگیرید و به جلو حرکت کنید." }
    ]
  },
  {
    "id": 1,
    "date": "2024-07-15",
    "tags": ["CSS", "طراحی وب", "واکنش‌گرایی"],
    "title": "جادوی CSS Container Queries: طراحی واکنش‌گرای واقعی",
    "content": [
      { "type": "paragraph", "text": "سال‌هاست که مدیا کوئری‌ها (Media Queries) ابزار اصلی ما برای طراحی واکنش‌گرا بوده‌اند. اما آن‌ها یک محدودیت بزرگ دارند: فقط به اندازه کل صفحه (viewport) واکنش نشان می‌دهند. اما اگر بخواهیم یک کامپوننت بر اساس فضای در دسترس خودش تغییر کند چه؟ اینجاست که کانتینر کوئری‌ها وارد می‌شوند." },
      { "type": "heading", "text": "کانتینر کوئری چیست؟" },
      { "type": "paragraph", "text": "کانتینر کوئری به یک کامپوننت اجازه می‌دهد تا به جای ابعاد کل صفحه، به ابعاد کانتینر والد خود واکنش نشان دهد. این یک تغییر پارادایم بزرگ است که ما را به سمت طراحی کامپوننت-محور واقعی سوق می‌دهد. یک کارت محصول می‌تواند در سایدبار کوچک و در بخش اصلی محتوا بزرگ باشد، بدون اینکه نیاز به کلاس‌های CSS جداگانه داشته باشد." },
      { "type": "image", "src": "https://images.unsplash.com/photo-1618788372246-79faff043142?q=80&w=1974", "alt": "یک طرح مفهومی که نشان می‌دهد کامپوننت‌ها به فضای کانتینر خود واکنش نشان می‌دهند." },
      { "type": "code", "text": ".card-container {\n  container-type: inline-size;\n  container-name: card;\n}\n\n.card {\n  /* Default styles */\n}\n\n@container card (min-width: 400px) {\n  .card {\n    /* Styles for when container is wider */\n    display: flex;\n  }\n}"},
      { "type": "quote", "text": "طراحی مبتنی بر کامپوننت سرانجام ابزار استایل‌دهی را که شایسته‌اش بود، پیدا کرد.", "author": "یک طراح وب"}
    ]
  }
]
